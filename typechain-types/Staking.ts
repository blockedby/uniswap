/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface StakingInterface extends utils.Interface {
  contractName: "Staking";
  functions: {
    "calculateReward(address)": FunctionFragment;
    "claim()": FunctionFragment;
    "getMyBalance()": FunctionFragment;
    "getMyStakeBalance()": FunctionFragment;
    "getRewardTokenAddress()": FunctionFragment;
    "getStakingDelay()": FunctionFragment;
    "getStakingPercent()": FunctionFragment;
    "getStakingTokenAddress()": FunctionFragment;
    "getWithdrawDelay()": FunctionFragment;
    "requestUnstake()": FunctionFragment;
    "rewardsToken()": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "setStakingDelay(uint256)": FunctionFragment;
    "setWithdraDelay(uint256)": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "stakingToken()": FunctionFragment;
    "unstake()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "calculateReward",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getMyBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMyStakeBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStakingDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStakingPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStakingTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestUnstake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setStakingDelay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdraDelay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "stakingToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unstake", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "calculateReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMyBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMyStakeBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakingDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakingPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakingTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestUnstake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setStakingDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdraDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;

  events: {};
}

export interface Staking extends BaseContract {
  contractName: "Staking";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StakingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    calculateReward(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { reward: BigNumber }>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getMyBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMyStakeBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRewardTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    getStakingDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    getStakingPercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    getStakingTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    getWithdrawDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    requestUnstake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardsToken(overrides?: CallOverrides): Promise<[string]>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStakingDelay(
      _delay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWithdraDelay(
      _delay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stake(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakingToken(overrides?: CallOverrides): Promise<[string]>;

    unstake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  calculateReward(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  claim(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getMyBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getMyStakeBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getRewardTokenAddress(overrides?: CallOverrides): Promise<string>;

  getStakingDelay(overrides?: CallOverrides): Promise<BigNumber>;

  getStakingPercent(overrides?: CallOverrides): Promise<BigNumber>;

  getStakingTokenAddress(overrides?: CallOverrides): Promise<string>;

  getWithdrawDelay(overrides?: CallOverrides): Promise<BigNumber>;

  requestUnstake(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardsToken(overrides?: CallOverrides): Promise<string>;

  setAdmin(
    _admin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStakingDelay(
    _delay: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWithdraDelay(
    _delay: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stake(
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakingToken(overrides?: CallOverrides): Promise<string>;

  unstake(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    calculateReward(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claim(overrides?: CallOverrides): Promise<void>;

    getMyBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getMyStakeBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardTokenAddress(overrides?: CallOverrides): Promise<string>;

    getStakingDelay(overrides?: CallOverrides): Promise<BigNumber>;

    getStakingPercent(overrides?: CallOverrides): Promise<BigNumber>;

    getStakingTokenAddress(overrides?: CallOverrides): Promise<string>;

    getWithdrawDelay(overrides?: CallOverrides): Promise<BigNumber>;

    requestUnstake(overrides?: CallOverrides): Promise<void>;

    rewardsToken(overrides?: CallOverrides): Promise<string>;

    setAdmin(_admin: string, overrides?: CallOverrides): Promise<void>;

    setStakingDelay(
      _delay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setWithdraDelay(
      _delay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    stakingToken(overrides?: CallOverrides): Promise<string>;

    unstake(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    calculateReward(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getMyBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getMyStakeBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getStakingDelay(overrides?: CallOverrides): Promise<BigNumber>;

    getStakingPercent(overrides?: CallOverrides): Promise<BigNumber>;

    getStakingTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getWithdrawDelay(overrides?: CallOverrides): Promise<BigNumber>;

    requestUnstake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardsToken(overrides?: CallOverrides): Promise<BigNumber>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStakingDelay(
      _delay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWithdraDelay(
      _delay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stake(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakingToken(overrides?: CallOverrides): Promise<BigNumber>;

    unstake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculateReward(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getMyBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMyStakeBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRewardTokenAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakingDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStakingPercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStakingTokenAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWithdrawDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requestUnstake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardsToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStakingDelay(
      _delay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWithdraDelay(
      _delay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unstake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
